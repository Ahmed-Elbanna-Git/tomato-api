<?php

namespace {{ path }}\Http\Controllers\Api;

use {{ modelPath }}\{{ model }};
use {{ path }}\Interfaces\{{ model }}RepositoryInterface;
use {{ path }}\Http\Requests\Api\Store{{ model }};
use {{ path }}\Http\Requests\Api\Update{{ model }};
use {{ path }}\Http\Resources\Api\{{ model }}Resource;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use TomatoPHP\TomatoApi\Services\RespondsWithHttpStatus;

class {{ model }}ApiController extends Controller
{
    use RespondsWithHttpStatus;

    public {{ model }}RepositoryInterface  ${{ objectName }}Repository;

    public function __construct({{ model }}RepositoryInterface ${{ objectName }}Repository)
    {
        $this->{{ objectName }}Repository = ${{ objectName }}Repository;
    }

    public function index(Request $request): mixed
    {
        $searchItems = $request->except([
            'page',
            'limit'
        ]);
        $limit = $request->limit ?? 10;

        $data = {{ model }}Resource::collection($this->{{ objectName }}Repository->getAllData( $limit,$searchItems,'created_at','desc')) ;

        return $this->success(__('Get all items'),$data);

    }

    public function store(Store{{ model }} $request) : mixed
    {
        ${{ objectName }}Details = $request->all();
        $data = $this->{{ objectName }}Repository->createItem(${{ objectName }}Details);
        return $this->success(__('Created Successfully'),$data);

     }

    public function show(Request $request): mixed
    {
        ${{ objectName }}Id = $request->get('id');
        $item = $this->{{ objectName }}Repository->getItemById(${{ objectName }}Id);
        if(!$item){
             return $this->failure(__('Not Found'),401);
        }else{
            $item =  new {{ model }}Resource($item);
            return $this->success(__('Item Retrieved Successfully'),$item);
        }

    }

    public function update(Update{{ model }}  $request): mixed
    {
        ${{ objectName }}Id = $request->get('id');

        ${{ objectName }}Details = $request->all();
        $data =  $this->{{ objectName }}Repository->updateItem(${{ objectName }}Id, ${{ objectName }}Details);
        $item =  new {{ model }}Resource($data);
        return $this->success(__('Updated Successfully'),$item);
    }

    public function delete(Request $request): mixed
    {
        ${{ objectName }}Id = $request->get('id');
        ${{ objectName }}Item =  $this->{{ objectName }}Repository->deleteItem(${{ objectName }}Id);

        if(!${{ objectName }}Item){
           return $this->failure(__('Not Found'),401);
        }else{
            return $this->success(__('Deleted Successfully'));
        }
    }
}

